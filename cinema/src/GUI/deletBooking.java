/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import clas.*;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author hneen.
 */
public class deletBooking extends javax.swing.JFrame {

    /**
     * Creates new form deletBooking
     */
    public deletBooking() {
        initComponents();
    }

    int id;
    String [] listMovie;
    public deletBooking(int id) {
        initComponents();
        this.id=id;
        Order_summary();
        int i=0;
        if (Order_summary()!=null){
            listMovie =new String[50];
            for (order_record b: Order_summary()){
                if (i!=50){
                    listMovie[i]=b.BookingDelt();
                    i++;
                }
            }
            jList1.setModel(new DefaultComboBoxModel<>(listMovie));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        BackjButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        DeletjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 204));
        jLabel1.setText("Select Booking to delete:");

        BackjButton1.setBackground(new java.awt.Color(255, 204, 204));
        BackjButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        BackjButton1.setText("Back");
        BackjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackjButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 204, 0));
        jLabel2.setText("Delete Booking");

        DeletjButton.setBackground(new java.awt.Color(255, 204, 204));
        DeletjButton.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        DeletjButton.setText("Delete");
        DeletjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(190, 190, 190))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(198, 198, 198))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BackjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DeletjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeletjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(BackjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void BackjButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
        customerMenue d = new customerMenue(id);
        d.setTitle("movie");
        d.setVisible(true);
    }

    private void DeletjButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int select=-1;
        select=jList1.getSelectedIndex();
        if (select!=-1){
            try {
                int index=-1;
                index=Order_summary().get(select).getOrder().getId();
                if (index!=-1){
                    delete_items(index);
//                    index=-1;
                    int i=0;
                    if (Order_summary()!=null){
                        listMovie =new String[50];
                        for (order_record b: Order_summary()){
                            if (i!=50){
                                listMovie[i]=b.BookingDelt();
                                i++;
                            }
                        }
                        jList1.setModel(new DefaultComboBoxModel<>(listMovie));
                    }
                }

            }catch (Exception e){
                JOptionPane.showMessageDialog(this, "reselect an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "select an items to be delete", "Error", JOptionPane.ERROR_MESSAGE);
        }    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deletBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deletBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deletBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deletBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new deletBooking().setVisible(true);
            }
        });
    }


    public List<order_record> Order_summary() {
        List<order_record> summary =null;
        Order order=null;
        Payment payment=null;
        Customer customer=null;
        movieName movie=null;
        int num_item=0;
        DB conn = new DB();
        Connection dbconn = conn.connectDB();

        try {
            //select all order
            PreparedStatement order_record = dbconn.prepareStatement("SELECT * FROM order_record where custemer_id=?");
            order_record.setInt(1,id);
            ResultSet order1 = order_record.executeQuery();
            summary =new ArrayList<order_record>();
            while (order1.next()) {
                try {

                    PreparedStatement  payInfo=dbconn.prepareStatement("SELECT * FROM cash where Payment_id=?");
                    payInfo.setInt(1,order1.getInt("pay_id"));
                    ResultSet  cash=payInfo.executeQuery();
                    if (cash.next()){
                        order = new Order();
                        order.setId(order1.getInt("order_id"));
                        payment= new cash(cash.getInt("Payment_id"),cash.getDouble("Order_Total_price"),cash.getString("currency"));
                        num_item=cash.getInt("num_items");
                        cash.close();
                    }
                    payInfo=dbconn.prepareStatement("SELECT * FROM card where Payment_id=?");
                    payInfo.setInt(1,order1.getInt("pay_id"));
                    ResultSet  card=payInfo.executeQuery();
                    if (card.next()){
                        order = new Order();
                        order.setId(order1.getInt("order_id"));
                        payment= new card();
                        payment.setPay_id(card.getInt("Payment_id"));
                        payment.setTotal_price(card.getDouble("Order_Total_price"));
                        num_item=card.getInt("num_items");
                        card.close();
                    }
                    PreparedStatement   movieInfo=dbconn.prepareStatement("SELECT * FROM movie where movie_id=?");
                    movieInfo.setInt(1,order1.getInt("movie_id"));
                    ResultSet move =movieInfo.executeQuery();
                    if (move.next()){
                        movie=new movieName();
                        movie.setItem_id(move.getInt("movie_id"));
                        movie.setItem_name(move.getString("movie_name"));
                        movie.setLanguage(move.getString("Language"));
                        movie.setAge(move.getString("age"));
                        move.close();
                    }

                    PreparedStatement   customerInfo=dbconn.prepareStatement("SELECT coustomer_id , coustomer_name  FROM customer where coustomer_id=?");
                    customerInfo.setInt(1,id);
                    ResultSet  cus=customerInfo.executeQuery();
                    if (cus.next()){
                        customer=new Customer();
                        customer.setId(cus.getInt("coustomer_id"));
                        customer.setName(cus.getString("coustomer_name"));
                        cus.close();
                    }



                    if (order!=null && payment!=null && customer!=null &&  movie!=null) {
                        summary.add(new order_record(order, payment, customer, num_item,movie));
                    }
                    payInfo.close();
                    customerInfo.close();

                } catch (SQLException e) {
                    e.printStackTrace();
                }

            }
            order_record.close();
            order1.close();
        } catch (SQLException e) {
            e.printStackTrace();

        }finally {
            try {
                dbconn.close();
            }catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return summary;
    }

    private void delete_items(int index){
        DB n= new DB();
        Connection dbconn =n.connectDB();
        PreparedStatement delete=null;
        try {
            delete =(PreparedStatement) dbconn.prepareStatement("DELETE FROM cinema.order WHERE (order_id = ?)");
            delete.setInt(1,index);
            int resultSet=delete.executeUpdate();
            if (resultSet!=0) {
                int i=0;
                if (Order_summary()!=null){
                    listMovie =new String[50];
                    for (order_record b: Order_summary()){
                        if (i!=50){
                            listMovie[i]=b.BookingDelt();
                            i++;
                        }
                    }
                    jList1.setModel(new DefaultComboBoxModel<>(listMovie));
                    JOptionPane.showMessageDialog(this, "delete done!", "successful", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                dbconn.close();
                delete.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }



    // Variables declaration - do not modify                     
    private javax.swing.JButton BackjButton1;
    private javax.swing.JButton DeletjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}
